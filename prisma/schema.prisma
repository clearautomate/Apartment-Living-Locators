generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(uuid())
  fname       String
  lname       String
  email       String?
  phone       String?
  username    String      @unique
  password    String
  permissions Permissions @default(agent)
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())

  leases          Lease[]
  draws           Draw[]
  Payment         Payment[]
  monthlyCounters MonthlyCounter[]
}

enum Permissions {
  owner
  agent
}

model Lease {
  id                String         @id @default(uuid())
  moveInDate        DateTime
  invoiceNumber     String
  complex           String
  tenantFname       String
  tenantLname       String
  tenantEmail       String?
  apartmentNumber   String
  rentAmount        Float
  commissionType    CommissionType
  commissionPercent Float?
  commission        Float
  extraNotes        String?
  paidStatus        PaidStatus     @default(unpaid)

  balancePaid Float?
  balanceDue  Float?

  Payment Payment[]

  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum PaidStatus {
  unpaid
  paid
  partially
  chargeback
}

enum CommissionType {
  percent
  flat
}

model Payment {
  id String @id @default(uuid())

  leaseId String
  lease   Lease  @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  paymentType PaymentType
  payout      Float?
  amount      Float
  date        DateTime
  notes       String?

  createdAt DateTime @default(now())
}

enum PaymentType {
  advance
  chargeback
  payment
  adjustment
}

model Draw {
  id        String   @id @default(uuid())
  date      DateTime
  amount    Float
  notes     String?
  createdAt DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model MonthlyCounter {
  userId String
  month  Int
  year   Int
  value  Int    @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, month, year])
}
